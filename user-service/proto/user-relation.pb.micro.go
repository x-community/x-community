// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user-relation.proto

package community

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserRelationService service

type UserRelationService interface {
	FellowUser(ctx context.Context, in *FellowUserRequest, opts ...client.CallOption) (*FellowUserReply, error)
	GetFellowCount(ctx context.Context, in *GetFellowCountRequest, opts ...client.CallOption) (*GetFellowCountReply, error)
	GetFellowers(ctx context.Context, in *GetFellowersRequest, opts ...client.CallOption) (*GetFellowersReply, error)
	GetFellowedUsers(ctx context.Context, in *GetFellowedUsersRequest, opts ...client.CallOption) (*GetFellowedUsersReply, error)
}

type userRelationService struct {
	c    client.Client
	name string
}

func NewUserRelationService(name string, c client.Client) UserRelationService {
	return &userRelationService{
		c:    c,
		name: name,
	}
}

func (c *userRelationService) FellowUser(ctx context.Context, in *FellowUserRequest, opts ...client.CallOption) (*FellowUserReply, error) {
	req := c.c.NewRequest(c.name, "UserRelationService.FellowUser", in)
	out := new(FellowUserReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRelationService) GetFellowCount(ctx context.Context, in *GetFellowCountRequest, opts ...client.CallOption) (*GetFellowCountReply, error) {
	req := c.c.NewRequest(c.name, "UserRelationService.GetFellowCount", in)
	out := new(GetFellowCountReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRelationService) GetFellowers(ctx context.Context, in *GetFellowersRequest, opts ...client.CallOption) (*GetFellowersReply, error) {
	req := c.c.NewRequest(c.name, "UserRelationService.GetFellowers", in)
	out := new(GetFellowersReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRelationService) GetFellowedUsers(ctx context.Context, in *GetFellowedUsersRequest, opts ...client.CallOption) (*GetFellowedUsersReply, error) {
	req := c.c.NewRequest(c.name, "UserRelationService.GetFellowedUsers", in)
	out := new(GetFellowedUsersReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserRelationService service

type UserRelationServiceHandler interface {
	FellowUser(context.Context, *FellowUserRequest, *FellowUserReply) error
	GetFellowCount(context.Context, *GetFellowCountRequest, *GetFellowCountReply) error
	GetFellowers(context.Context, *GetFellowersRequest, *GetFellowersReply) error
	GetFellowedUsers(context.Context, *GetFellowedUsersRequest, *GetFellowedUsersReply) error
}

func RegisterUserRelationServiceHandler(s server.Server, hdlr UserRelationServiceHandler, opts ...server.HandlerOption) error {
	type userRelationService interface {
		FellowUser(ctx context.Context, in *FellowUserRequest, out *FellowUserReply) error
		GetFellowCount(ctx context.Context, in *GetFellowCountRequest, out *GetFellowCountReply) error
		GetFellowers(ctx context.Context, in *GetFellowersRequest, out *GetFellowersReply) error
		GetFellowedUsers(ctx context.Context, in *GetFellowedUsersRequest, out *GetFellowedUsersReply) error
	}
	type UserRelationService struct {
		userRelationService
	}
	h := &userRelationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserRelationService{h}, opts...))
}

type userRelationServiceHandler struct {
	UserRelationServiceHandler
}

func (h *userRelationServiceHandler) FellowUser(ctx context.Context, in *FellowUserRequest, out *FellowUserReply) error {
	return h.UserRelationServiceHandler.FellowUser(ctx, in, out)
}

func (h *userRelationServiceHandler) GetFellowCount(ctx context.Context, in *GetFellowCountRequest, out *GetFellowCountReply) error {
	return h.UserRelationServiceHandler.GetFellowCount(ctx, in, out)
}

func (h *userRelationServiceHandler) GetFellowers(ctx context.Context, in *GetFellowersRequest, out *GetFellowersReply) error {
	return h.UserRelationServiceHandler.GetFellowers(ctx, in, out)
}

func (h *userRelationServiceHandler) GetFellowedUsers(ctx context.Context, in *GetFellowedUsersRequest, out *GetFellowedUsersReply) error {
	return h.UserRelationServiceHandler.GetFellowedUsers(ctx, in, out)
}
