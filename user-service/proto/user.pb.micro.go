// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package community

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterReply, error)
	VerifyAccount(ctx context.Context, in *VerifyAccountRequest, opts ...client.CallOption) (*VerifyAccountReply, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...client.CallOption) (*AuthenticateReply, error)
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*VerifyTokenReply, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterReply, error) {
	req := c.c.NewRequest(c.name, "UserService.Register", in)
	out := new(RegisterReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyAccount(ctx context.Context, in *VerifyAccountRequest, opts ...client.CallOption) (*VerifyAccountReply, error) {
	req := c.c.NewRequest(c.name, "UserService.VerifyAccount", in)
	out := new(VerifyAccountReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...client.CallOption) (*AuthenticateReply, error) {
	req := c.c.NewRequest(c.name, "UserService.Authenticate", in)
	out := new(AuthenticateReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*VerifyTokenReply, error) {
	req := c.c.NewRequest(c.name, "UserService.VerifyToken", in)
	out := new(VerifyTokenReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterReply) error
	VerifyAccount(context.Context, *VerifyAccountRequest, *VerifyAccountReply) error
	Authenticate(context.Context, *AuthenticateRequest, *AuthenticateReply) error
	VerifyToken(context.Context, *VerifyTokenRequest, *VerifyTokenReply) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Register(ctx context.Context, in *RegisterRequest, out *RegisterReply) error
		VerifyAccount(ctx context.Context, in *VerifyAccountRequest, out *VerifyAccountReply) error
		Authenticate(ctx context.Context, in *AuthenticateRequest, out *AuthenticateReply) error
		VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *VerifyTokenReply) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterReply) error {
	return h.UserServiceHandler.Register(ctx, in, out)
}

func (h *userServiceHandler) VerifyAccount(ctx context.Context, in *VerifyAccountRequest, out *VerifyAccountReply) error {
	return h.UserServiceHandler.VerifyAccount(ctx, in, out)
}

func (h *userServiceHandler) Authenticate(ctx context.Context, in *AuthenticateRequest, out *AuthenticateReply) error {
	return h.UserServiceHandler.Authenticate(ctx, in, out)
}

func (h *userServiceHandler) VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *VerifyTokenReply) error {
	return h.UserServiceHandler.VerifyToken(ctx, in, out)
}
